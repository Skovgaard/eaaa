package ex2;import java.util.Arrays;import java.util.Random;public class ArrayBag<E> implements Bag<E> {    private E[] elements;    private int currentSize;    public ArrayBag() {        final int INITIAL_SIZE = 10;        elements = (E[]) new Object[INITIAL_SIZE];        currentSize = 0;    }    @Override    public int getCurrentSize() {        return currentSize;    }    @Override    public boolean isFull() {        return currentSize == elements.length;    }    @Override    public boolean isEmpty() {        return currentSize == 0;    }    @Override    public boolean add(E newEntry) {        for (int i = 0; i < elements.length; i++) {            if (elements[i] == null) {                elements[i] = newEntry;                currentSize++;                return true;            }        }        return false;    }    @Override    public E remove() {        E[] array = toArray();        int index = new Random().nextInt(array.length) - 1;        remove(array[index]);        currentSize--;        return elements[index];    }    @Override    public boolean remove(E anEntry) {        for (int i = 0; i < elements.length; i++) {            if (elements[i] != null && elements[i].equals(anEntry)) {                elements[i] = null;                currentSize--;                return true;            }        }        return false;    }    @Override    public void clear() {        Arrays.fill(elements, null);        currentSize = 0;    }    @Override    public int getFrequencyOf(E anEntry) {        int count = 0;        for (E element : elements) {            if (element != null && element.equals(anEntry))                count++;        }        return count;    }    @Override    public boolean contains(E anEntry) {        for (E element : elements) {            if (element != null && element.equals(anEntry))                return true;        }        return false;    }    @Override    public E[] toArray() {        E[] array = (E[]) new Object[currentSize];        int arrayIndex = 0;        for (E element : elements) {            if (element != null) {                array[arrayIndex] = element;                arrayIndex++;            }        }        return array;    }}