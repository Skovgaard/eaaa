10. What is the Big Oh of the following computation?

int sum = 0;
for (int counter = n; counter > 0; counter = counter - 2)
    sum = sum + counter;

Answer: O(n)

11. What is the Big Oh of the following computation?

int sum = 0;
for (int counter = 0; counter < n; counter = 2 * counter)
    sum = sum + counter;

Answer: O(log(n)) (Uendelig da counter = 0 og 0 * x = 0)

12. Suppose that your implementation of a particular algorithm appears in Java as follows:

for (int pass = 1; pass <= n; pass++) {
    for (int index = 0; index < n; index++) {
        for (int count = 1; count < 10; count++) {
            ...
        } // end for
    } // end for
} // end for

The algorithm involves an array of n items. The previous code shows the only repetition in the algorithm,
but it does not show the computations that occur within the loops. These computations, however,
are independent of n. What is the order of the algorithm?

Answer: O(n * n * 10) = O(10n^2) = O(n^2)

13. Repeat the previous exercise, but replace 10 with n in the inner loop.

Answer: O(n * n * n) = O(n^3)

14. What is the Big Oh of method1? Is there a best case and a worst case?

public static void method1(int[] array, int n) {
    for (int index = 0; index < n - 1; index++) {
        int mark = privateMethod1(array, index, n - 1);
        int temp = array[index];
        array[index] = array[mark];
        array[mark] = temp;
    } // end for
} // end method1

public static int privateMethod1(int[] array, int first, int last) {
    int min = array[first];
    int indexOfMin = first;
    for (int index = first + 1; index <= last; index++) {
        if (array[index] < min) {
            min = array[index];
            indexOfMin = index;
        } // end if
    } // end for return indexOfMin;
} // end privateMethod1

Answer: O(n^2), best case O(n * n/2), worst case O(n^2)